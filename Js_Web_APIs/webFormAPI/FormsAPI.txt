Remember, Web APIs is the broader category that includes Browser APIs, which are specific to web browsers, as well as other web-related APIs.


First: Web Forms API:
------------------------

Web Forms API: is a collection of functionalities provided by browsers that allow developers to create and manage web forms more effectively (how?)
By providing methods and properties to validate form inputs, ensuring that users enter correct and expected data before submitting the form. 

OK! Learning how to use Web Forms API can greatly enhance the user experience by providing immediate --> feedback and preventing form submission errors.


For back-end, it provides clean and accurate data, reduce server load and imporve security.


Again, Forms API is a set of methods and properties provided by browsers that developers can use to interact with and manage form elements (HTML forms).



Constraint Validation DOM Methods (next we will talk about properties)
1. element.checkValidity()       // this is method to check input data validation, BUT using element.validity.valid is better and you will like it.
2. setCustomValidity(message)     // you will use this method to write your own error message when user inputs "bad" data into your form field.




1. element.checkValidity()
Description: 
This method checks if an input element contains valid data. 
It returns true if the element's value meets all the defined constraints, and false otherwise.

Usage: Typically used to programmatically check the validity of an input before form submission.

Example:
if (inputElement.checkValidity()) {
    // Proceed with form submission
} else {
    // Show error message
}


2. setCustomValidity(message)  // your message not the browser boring error messages to the beloved user
Description: 
This method sets a custom validation message for an input element. 
When the element's value is invalid, this message will be shown instead of the browser's default validation message.
Usage: Useful for providing user-friendly or specific error messages .

Example:
let message;
//validation code
// update your message
inputElement.setCustomValidity(message);




Constraint Validation DOM Properties 
1. element.validity
2. element.validationMessage
3. willValidate



1. element.validity   --> contains boolean properties (many properties listed belwo, e.g, element.validity.valueMissing) related to the validity of an input element.
2. element.validationMessage    --> contains the browser's default boring message, browser will display when the validity of input elements is false.
3 element.willValidate         --> indicates if an input element will be validated. It will if not..no worries

Here we are talking about forms elements and their attributes 
e,g:
        <input type="email" id="email" name="email" required>
What if a user enters incorrect email? like hello.gmail.com   

We use these properties to check form elements validation and write a user-friendly message

element.validity Properties:
----------------------------
element.validity.customError     --> Set to true if a custom validation message has been set using element.setCustomValidity(yourMessage)
element.validity.patternMismatch --> Set to true, if an element's value does not match its pattern attribute (regular expressions pattern).
element.validity.rangeOverflow   --> Set to true, if an element's value is greater than its max attribute.
element.validity.rangeUnderflow  --> Set to true, if an element's value is less than its min attribute.
element.validity.stepMismatch    --> Set to true, if an element's value is invalid per its step attribute.
element.validity.tooLong         --> Set to true, if an element's value exceeds its maxLength attribute.
element.validity.typeMismatch    --> Set to true if the input's value is not in the expected format (e.g., an invalid email or URL).
element.validity.valueMissing    --> Set to true, if an element (with a required attribute) has no value.
element.validity.valid           --> Set to true, if an element's value is valid (this one is the king, why? because based on this attribute, you display you error message to the user )

Full example: formAPI.html

End

