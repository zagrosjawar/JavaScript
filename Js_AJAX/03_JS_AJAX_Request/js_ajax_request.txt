Second: AJAX request 
-------------------
Remember: The XMLHttpRequest object is used to exchange (send and receive) data with a server.

1. JavaScript AJAX Request in Detail:
The XMLHttpRequest object is the core of AJAX operations, enabling asynchronous communication between the client and server. 
Here's an in-depth look at how to send requests to a server using AJAX.

2. Sending a Request to a Server
To send a request to a server using the XMLHttpRequest object, you primarily use the open() and send() methods. 
Let's break down these methods and their usage.

    open(method, url, async)
    The open() method initializes a request.

    Parameters:
        method: The HTTP request method to use (e.g., "GET" or "POST").
        url: The URL to send the request to. This can be any file on the server, such as .txt, .xml, .asp, .php, etc.
        async: A boolean indicating whether the request should be asynchronous (true) or synchronous (false).
        Syntax:
                xhttp.open("GET", "ajax_info.txt", true);
                Details:

                Asynchronous Requests (async = true): Allows the JavaScript to continue executing while the request is being processed. 
                This is the recommended approach.
                Synchr onous Requests (async = false): Blocks the execution of JavaScript until the server response is received. 
                This can cause the application to hang if the server is slow and is generally not recommended.

    send() The send() method sends the request to the server.
    Syntax:
           xhttp.send();

           For POST requests, you can send DATA as a string parameter to the send() method:
                 xhttp.send("fname=Henry&lname=Ford");

            GET Requests  GET requests are simple and fast, often used to retrieve data from a server.
            Example:
                    var xhttp = new XMLHttpRequest();
                    xhttp.open("GET", "demo_get.asp", true);
                    xhttp.send();

            To avoid caching and ensure the server always receives a new request, you can append a unique query parameter t="+Math.random(). 
            If the same URL is requested multiple times, the browser might serve the cached response instead of making a new request to the server.
            Example:
                    var xhttp = new XMLHttpRequest();
                    xhttp.open("GET", "demo_get.asp?t=" + Math.random(), true);
                    xhttp.send();

            To send parameters, e.g., fname=Henry&lname=Ford with a GET request, append them to the URL:
            Example:
                    var xhttp = new XMLHttpRequest();
                    xhttp.open("GET", "demo_get2.asp?fname=Henry&lname=Ford", true);
                    xhttp.send();

            POST Requests  POST requests are used to send data to the server, often for updating or creating resources.
            Example:
                    var xhttp = new XMLHttpRequest();
                    xhttp.open("POST", "demo_post.asp", true);
                    xhttp.send();

            To send data like an HTML form, use the setRequestHeader() method to set the appropriate header and include the data in the send() method:
            Example:
                    var xhttp = new XMLHttpRequest();
                    xhttp.open("POST", "ajax_test.asp", true);
                    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                    xhttp.send("fname=Henry&lname=Ford");

            
            Setting HTTP Headers  The setRequestHeader() method is used to add HTTP headers to the request.
            Syntax:
            xhttp.setRequestHeader(header, value);
                Parameters:
                            header: The name of the header.
                            value: The value of the header.
                            Example:
                                    var xhttp = new XMLHttpRequest();
                                    xhttp.open("POST", "ajax_test.asp", true);
                                    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                                    xhttp.send("fname=Henry&lname=Ford");


3. Synchronous Requests
    Synchronous requests (using async = false) are generally not recommended because they block the execution of JavaScript until the response is received. 
    However, they can be used for quick testing.
    Example:
            var xhttp = new XMLHttpRequest();
            xhttp.open("GET", "ajax_info.txt", false);
            xhttp.send();
            document.getElementById("demo").innerHTML = xhttp.responseText;


Check out the Full Example:
Full project example:

user-management-system/
├── index.html
├── script.js
├── styles.css
└── db.json
└── prerequisites.txt


Summary
    open(method, url, async): Initializes the request with the specified method, URL, and async flag.
    send(): Sends the request to the server.

    GET Requests: Used to retrieve data from the server.
    POST Requests: Used to send data to the server.

    setRequestHeader(): Adds HTTP headers to the request.

    Asynchronous Requests: Recommended for non-blocking operations.
    Synchronous Requests: Not recommended due to blocking behavior.

By understanding and utilizing these methods, you can effectively use AJAX to communicate with servers and build dynamic web applications.


End